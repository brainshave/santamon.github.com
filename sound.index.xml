<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Long-standing Bug</title>
  <link href="http://longstandingbug.com/atom.xml" rel="self" />
  <link href="http://longstandingbug.com" />
  <updated>2011-06-20T00:00:00+00:00</updated>
  <id>http://longstandingbug.com/atom.xml</id>
  <author>
    <name>Szymon Witamborski</name>
    <email>santamon@gmail.com</email>
  </author>

  
  <entry>
    <title>Sound Synthesis &amp; Playback in Clojure</title>
    <link href="http://longstandingbug.com/sound-synthesis.html" />
    <updated>2011-06-20T00:00:00+00:00</updated>
    <id>http://longstandingbug.com/sound-synthesis.html</id>
    <content type="html">
      &lt;p&gt;I&amp;apos;ve been playing with sound in Clojure lately so I thought I&amp;apos;d
document what I&amp;apos;ve learned.&lt;/p&gt;  &lt;p&gt;This tutorial covers generating simple, clean sounds of desired
frequency (sines) and accessing Java Sound API (it&amp;apos;s not that scary,
really). We&amp;apos;ll start with nothing and at the end, we&amp;apos;ll even play some
melody with synthesized sounds :) (no instruments, pre-recorded
samples or whatsoever).&lt;/p&gt;  &lt;p&gt;Entry level: &lt;em&gt;know where your repl is&lt;/em&gt;.&lt;/p&gt;
      &lt;h2&gt;Fast Facts About Sound&lt;/h2&gt; &lt;p&gt;Making some noise is in fact moving particles of air and a speaker
does that. And we will move the speaker. From perspective of a
programmer playing some sound is changing speaker&amp;apos;s position over
time. Because on computers nothing is continuous, we can manage it&amp;apos;s
position in concrete moments only. These &lt;em&gt;moments&lt;/em&gt; come at constant
rate. So we can imagine that playing a sound is actually feeding our
speaker with it&amp;apos;s position values regularly.&lt;/p&gt;  &lt;p&gt;About those &lt;strong&gt;moments&lt;/strong&gt;: Speaker can move back and forth. It&amp;apos;s
position is relative to some starting position to which we will refer
as position &lt;em&gt;zero&lt;/em&gt;. Moving speaker forward is increasing it&amp;apos;s position
and moving backward is decreasing it&amp;apos;s position (actually, it can be
the other way around but this time we shouldn&amp;apos;t care). So, the
speaker&amp;apos;s position is a number and it&amp;apos;s called a &lt;em&gt;sample&lt;/em&gt;.&lt;/p&gt;  &lt;h2&gt;Technicalia of Sound&lt;/h2&gt; &lt;p&gt;Sample has fixed size and it&amp;apos;s usually 16 bits. Sample size is
limiting our minimum and maximum value. We don&amp;apos;t have to bother about
what these values are (it&amp;apos;ll be handled automatically).&lt;/p&gt;  &lt;p&gt;Pace at which samples come to a sound system is usually 48000 Hz (Hz
[Hertz] means &amp;quot;ticks/samples per second&amp;quot;) or 44100 Hz (&amp;quot;Audio CD&amp;quot;
quality) and it&amp;apos;s called &lt;em&gt;sample rate&lt;/em&gt;. Yes, we need to feed our
speaker &lt;strong&gt;that&lt;/strong&gt; fast ;).&lt;/p&gt;  &lt;h2&gt;Know Your Math&lt;/h2&gt; &lt;p&gt;Because this tut is about generating sines I have to say what a sine
actually is. Sine is the cleanest type of sound possible. It&amp;apos;s also
the outcome of universally known &lt;em&gt;sin&lt;/em&gt; function.&lt;/p&gt;  &lt;p&gt;&lt;!-- (save (function-plot #(sin (* 2 % Math/PI)) 0 1 :step-size 0.005
:y-label &quot;&quot; :x-label &quot;&quot; ) &quot;sin-plain.png&quot; :width 600 :height 160) --&gt;
&lt;img src=&quot;images/sin-plain.png&quot; alt=&quot;@&quot;&gt;&lt;/p&gt;  &lt;p&gt;Someone said that every sound can be torn to several sines. So once we
can generate one sine we can synthesize any sound. In this tut we&amp;apos;ll
generate just one at a time ;) .&lt;/p&gt;  &lt;p&gt;Every sine played over time has it&amp;apos;s frequency &lt;em&gt;f&lt;/em&gt;. It&amp;apos;s measured just
like sample rate, in Hz. Frequency is a weird number, because it&amp;apos;s
just inverted period (also called &lt;em&gt;term&lt;/em&gt; and abbreviated &lt;em&gt;T&lt;/em&gt;: time
after it repeats itself):&lt;/p&gt;  &lt;p style=&quot;text-align: center; font-style: italic;&quot;&gt;
f = 1 / T&lt;br /&gt;
T = 1 / f
&lt;/p&gt;

 &lt;p&gt;It means that sine of 1 Hz frequency have 1 s period and sine of 2 Hz
frequency have 0.5 s period and so on.&lt;/p&gt;  &lt;p&gt;&lt;!-- (save (doto (function-plot #(sin (* 2 % Math/PI)) 0 1 :step-size
0.005 :y-label &quot;&quot; :x-label &quot;Time [s]&quot; :legend true :series-label &quot;f =
1 Hz&quot;) (add-function #(sin (* 4 % Math/PI)) 0 1 :series-label &quot;f = 2
Hz&quot;)) &quot;sin-two.png&quot; :width 600 :height 200) --&gt;
&lt;img src=&quot;images/sin-two.png&quot; alt=&quot;@&quot;&gt;&lt;/p&gt;  &lt;p&gt;Period is important because we will generate data only for one pass of
a sine and play it in a loop (without any &lt;code&gt;loop&lt;/code&gt; involved ;) ).&lt;/p&gt;  &lt;h2&gt;Some Code At Last!&lt;/h2&gt; &lt;p&gt;Now we&amp;apos;ll jump right into code. As a basis of generating sine
we&amp;apos;ll use &lt;code&gt;Math/sin&lt;/code&gt; function. It generates sine for period of 2&lt;em&gt;&amp;pi;&lt;/em&gt;
so we have to scale it to desired period.&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(defn sine [sample-rate freq]
  (let [term (/ 1 freq)
        samples (* term sample-rate)      ;1
        factor (/ (* 2 Math/PI) samples)] ;2
    (map #(Math/sin (* % factor))         ;3
         (range samples))))
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;sine&lt;/code&gt; function creates a collection of numbers which are values of
speaker position over time (successive samples). Explanation for
numbered lines:&lt;/p&gt;  &lt;ol&gt;&lt;li&gt;&lt;p&gt;Amount of samples depends directly on term and sample rate. Sample
rate tells how many samples correspond to 1 sec. So if we take a
product of term and sample rate we will get the amount of samples
for this frequency.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;To scale 2&lt;em&gt;&amp;pi;&lt;/em&gt; period to our sample count we will multiply every
number from &lt;code&gt;(range samples)&lt;/code&gt; by &lt;code&gt;factor&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Actual collection generation using &lt;code&gt;Math/sin&lt;/code&gt; function.&lt;/p&gt; &lt;/li&gt;&lt;/ol&gt; &lt;p&gt;Every number in returned collection will be in [-1..1] range. We can
check that by just invoking &lt;code&gt;sine&lt;/code&gt; (tip: test only with large values
of frequencies because small frequencies results in very long
sequences):&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;user&amp;gt; (sine 48000 5000)
(0.0 0.6087614290087207 0.9659258262890683 0.9238795325112867
 0.49999999999999994 -0.13052619222005177 -0.7071067811865475
 -0.9914448613738104 -0.8660254037844386 -0.38268343236508956)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now we get the idea of generating a sine. The rest of this tutorial is
actually just technical stuff, but they&amp;apos;re essential to get things
working.&lt;/p&gt;  &lt;h2&gt;Audio Formats&lt;/h2&gt; &lt;p&gt;To tell the sound system what we want to play we need to agree on some
kind of contract on how our sound data will be formatted. This
contract (or &lt;em&gt;protocol&lt;/em&gt; if you will) is called an &lt;em&gt;audio
format&lt;/em&gt;. We&amp;apos;ll just focus on most used format nowadays.&lt;/p&gt;  &lt;p&gt;An audio format in Java is represented by object of &lt;code&gt;AudioFormat&lt;/code&gt;
class (which lives in
&lt;a href=&quot;http://download.oracle.com/javase/7/docs/api/index.html?javax/sound/sampled/package-summary.html&quot;&gt;javax.sound.sampled&lt;/a&gt;,
we&amp;apos;ll need some more classes from there, just keep that in mind).
Objects of this class serve only as metadata so we&amp;apos;ll create one,
keep it somewhere and pass it around.&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(import &amp;apos;(javax.sound.sampled AudioFormat AudioFormat$Encoding))

(def popular-format
  (AudioFormat. AudioFormat$Encoding/PCM_SIGNED ;1: format
                48000 ;   sample rate
                16    ;   bits per sample (2 bytes)
                2     ;   channels: stereo!
                4     ;2: frame size 2*16bits [bytes]
                48000 ;3: frame rate
                false ;4: little endian
                ))
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Again, I&amp;apos;ll explain the numbered lines:&lt;/p&gt;  &lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;PCM_SIGNED&lt;/code&gt; is a linear signed and uncompressed format, which
means that each sample will be a signed integer.&lt;/p&gt;  &lt;p&gt;(&lt;code&gt;AudioFormat$Encoding/PCM_SIGNED&lt;/code&gt; means &lt;code&gt;PCM_SIGNED&lt;/code&gt; static
variable in &lt;code&gt;Encoding&lt;/code&gt; class which is inner class in
&lt;code&gt;AudioFormat&lt;/code&gt;.)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Frame is a complete unit of data for each moment in time (data for
all channels). So it&amp;apos;s size in our uncompressed format is just a
number of bytes for every sample multiplied by number of channels.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Frame rate can be different from sample rate but it doesn&amp;apos;t make
sense this time.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;When we have more bytes than one for a sample, order in which we
read them matters. It&amp;apos;s so-called
&lt;a href=&quot;http://en.wikipedia.org/wiki/Endianness&quot;&gt;&lt;em&gt;endianness&lt;/em&gt;&lt;/a&gt;. Big
endian is reading bytes in forward direction, little endian is
reading them backwards. My computer is little endian and I&amp;apos;m
sympathizing with him.&lt;/p&gt; &lt;/li&gt;&lt;/ol&gt; &lt;h2&gt;How To Actually Play Something?&lt;/h2&gt; &lt;p&gt;To make our speakers move we need a &lt;em&gt;medium&lt;/em&gt; (as in &lt;em&gt;mediation&lt;/em&gt;) that
will tell speakers what to do for us. This medium is called a &lt;em&gt;line&lt;/em&gt;
in other places by analogy with lines in mixers. It can be acquired
from &lt;a href=&quot;http://download.oracle.com/javase/7/docs/api/javax/sound/sampled/AudioSystem.html&quot;&gt;AudioSystem&lt;/a&gt; class using &lt;code&gt;getLine&lt;/code&gt; method. There&amp;apos;s a &lt;a href=&quot;http://download.oracle.com/javase/tutorial/sound/accessing.html&quot;&gt;more
elaborate explanation&lt;/a&gt; on mixers and lines so I won&amp;apos;t get into much detail.&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(import &amp;apos;(javax.sound.sampled AudioSystem DataLine$Info
                              SourceDataLine))
(defn open-line [audio-format]
  (doto (AudioSystem/getLine
         (DataLine$Info. SourceDataLine audio-format))
    (.open audio-format)
    (.start)))&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&amp;quot;Getting a line&amp;quot; is actually querying Java&amp;apos;s audio system about line
that complies to our needs. Query is an instance of
&lt;a href=&quot;http://download.oracle.com/javase/7/docs/api/javax/sound/sampled/DataLine.Info.html&quot;&gt;DataLine.Info&lt;/a&gt;
class. &lt;code&gt;SourceDataLine&lt;/code&gt; says that we require a line that we can write
to. Names of &lt;code&gt;SourceDataLine&lt;/code&gt; and &lt;code&gt;TargetDataLine&lt;/code&gt; correspond to how
audio system sees it so they mean &amp;quot;source&amp;quot; and &amp;quot;target&amp;quot; not for our
program but for audio system. Other parameter to &lt;code&gt;DataLine.Info&lt;/code&gt;
constructor is an audio format.&lt;/p&gt;  &lt;p&gt;Next thing after getting a line is opening it and allowing data to
flow through it. This is done by &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt; methods
respectively.&lt;/p&gt;  &lt;p&gt;Then, playing a sound is done by invoking method &lt;a href=&quot;http://download.oracle.com/javase/7/docs/api/javax/sound/sampled/SourceDataLine.html#write(byte[],%20int,%20int%29&quot;&gt;write(byte[] b, int off, int len)&lt;/a&gt; which writes &lt;code&gt;len&lt;/code&gt; bytes from &lt;code&gt;b&lt;/code&gt; starting at index &lt;code&gt;off&lt;/code&gt;. Writing will block until all bytes from &lt;code&gt;b&lt;/code&gt; are flushed to sound system buffers.&lt;/p&gt;  &lt;p&gt;Phew, now we know where we need to get: we&amp;apos;ll generate that byte array for
particular line.&lt;/p&gt;  &lt;h2&gt;According To Contract...&lt;/h2&gt; &lt;p&gt;Our sine is not quite ready to push it to speakers yet. We need to
satisfy audio format that we defined earlier. To do that we will:&lt;/p&gt;  &lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Scale values of sine&lt;/strong&gt; to maximum and minimum values possible for
our sample size. We have 16 bits at our disposal which means we
have circa +/-&amp;nbsp;2&lt;sup&gt;15&lt;/sup&gt; range (one bit is stolen for sign).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tear each sample&lt;/strong&gt; to bytes according to chosen &lt;em&gt;endianness&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Multiply each sample&lt;/strong&gt; to conform number of channels.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pack whole sine&lt;/strong&gt; to byte array.&lt;/p&gt; &lt;/li&gt;&lt;/ol&gt; &lt;h3&gt;Scaling&lt;/h3&gt; &lt;p&gt;When coming out from &lt;code&gt;sine&lt;/code&gt; function our samples have floating-point
values from -1 to 1. We need to scale them to signed integers with
values from -2&lt;sup&gt;samplesize-1&lt;/sup&gt; to
2&lt;sup&gt;samplesize-1&lt;/sup&gt;-1. So just mulplying by amplitude of
2&lt;sup&gt;samplesize-1&lt;/sup&gt; will do the trick. Actual amplitude will be
delivered by &lt;code&gt;amplitude&lt;/code&gt; function:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(defn amplitude [sample-size]
  (Math/pow 2 (- sample-size 1.1)))&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;I subtract 1.1 (not 1) from sample size to avoid &lt;em&gt;dangerous&lt;/em&gt;
inaccuracy when multiplying two floating-point numbers.&lt;/p&gt;  &lt;p&gt;Actual scaling will be done in &lt;code&gt;quantize&lt;/code&gt; function:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(defn quantize [amplitude value]
  (int (* amplitude value)))&lt;/code&gt;&lt;/pre&gt; &lt;h3&gt;Fragmentation To Bytes&lt;/h3&gt; &lt;p&gt;I do reading integers backward and forward like this:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(defn little-endian [size x]
  (for [b (range size)]
    (-&amp;gt; (bit-shift-right x (* 8 b))
        (bit-and 255)
        unsigned-byte)))

(defn big-endian [size x]
  (reverse (little-endian size x)))&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Where &lt;code&gt;unsigned-byte&lt;/code&gt; is needed to cheat JVM because JVM supports only
signed bytes with values from -128 to 127 and we need signed bytes
with values in 0..255 range. Blah. So we cheat like this:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(defn unsigned-byte [x]
  (byte (if (&amp;gt; x 127) (- x 256) x)))&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is one thing that I won&amp;apos;t explain here :P. It&amp;apos;d be just too
big. It&amp;apos;s based on how signed and unsigned numbers &lt;a href=&quot;http://en.wikipedia.org/wiki/Two%27s_complement&quot;&gt;look
internally&lt;/a&gt;.&lt;/p&gt;  &lt;h3&gt;Repeating Data For Each Channel&lt;/h3&gt; &lt;p&gt;OK. This will be very lame stereo. We&amp;apos;ll just repeat data for each
channel and I do it like this: &lt;code&gt;(take frame-size (cycle bytes))&lt;/code&gt;. If
you wanna you can modify that code (in fact, you should, wink wink,
nudge nudge) and incorporate some fancy space-age surround effect.&lt;/p&gt;  &lt;h3&gt;Gathering It All Together&lt;/h3&gt; &lt;p&gt;Whole pipeline is mirrored in &lt;code&gt;sine-bytes&lt;/code&gt; function with each of these
steps represented by mapping a function on a collection returned by
it&amp;apos;s predecessor:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(defn sine-bytes [format freq]
  (let [{:keys [sampleSizeInBits frameSize
                sampleRate bigEndian]} (bean format)
        sample-size (/ sampleSizeInBits 8)
        ampl (amplitude sample-size)
        tear (if bigEndian big-endian little-endian)]
    (-&amp;gt;&amp;gt; (sine sampleRate freq)
         (map (partial quantize ampl))    ;1
         (map (partial tear sample-size)) ;2
         (map cycle)                      ;3
         (map (partial take frameSize))   ;3
         (apply concat)                   ;A
         byte-array)))                    ;4
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Numbers in comments corresponds to points mentioned before. Line &amp;apos;A&amp;apos;
is responsible for flattening the list of lists to a single
list. Output of &lt;code&gt;sine-bytes&lt;/code&gt; is what a &lt;em&gt;line&lt;/em&gt; needs.&lt;/p&gt;  &lt;h2&gt;Agent&lt;/h2&gt; &lt;p&gt;I&amp;apos;ve promised that there will be no &lt;code&gt;loop&lt;/code&gt; so here it is: whole playing
thingy will be handled by an agent. State of our agent will look like
this:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;{:line    line to write to
 :playing are we are playing or not
 :data    byte array with sound data}&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Setting sine data of desired &lt;code&gt;freq&lt;/code&gt; will be done by &lt;code&gt;recalc-data&lt;/code&gt;:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(defn recalc-data [{:keys [line] :as state} freq]
  (assoc state :data (sine-bytes (.getFormat line) freq)))
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For most of the time of agent&amp;apos;s life, &lt;code&gt;play-data&lt;/code&gt; will run (actually
making the noise):&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(defn play-data [{:keys [line data playing] :as state} agent]
  (when (and line data playing)
    (.write line data 0 (count data)) ;1
    (send-off agent play-data agent)) ;2
  state)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;play-data&lt;/code&gt; will write whole &lt;code&gt;data&lt;/code&gt; to the &lt;code&gt;line&lt;/code&gt; [1], and send itself
to agent to play it again [2] (here&amp;apos;s how there&amp;apos;s no &lt;code&gt;loop&lt;/code&gt; but there&amp;apos;s a
loop). Turns out, agents are nice way to model such continuous I/O
asynchronously. We&amp;apos;ll start and pause playing by these fns:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(defn pause [agent]
  (send agent assoc :playing false)
  (doto (:line @agent)
    .stop .flush))

(defn play [agent]
  (.start (:line @agent))
  (send agent assoc :playing true)
  (send-off agent play-data agent))&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;pause&lt;/code&gt; is &lt;code&gt;stop&lt;/code&gt;ping the line to pause immediatly when
called. Without this, pause would take effect after whole buffer is
played. &lt;code&gt;flush&lt;/code&gt; is invoked to flush anything that&amp;apos;s left in sound
system buffers.&lt;/p&gt;  &lt;p&gt;I use &lt;code&gt;send-off&lt;/code&gt; to &lt;code&gt;play-data&lt;/code&gt; because it&amp;apos;s a blocking operation.&lt;/p&gt;  &lt;p&gt;Two final fns will automate creating fresh agent and changing
frequency on the fly:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(defn change-freq [agent freq]
  (doto agent
    pause
    (send recalc-data freq)
    play))

(defn line-agent [line freq]
  (let [agent (agent {:line line})]
    (send agent recalc-data freq)
    (play agent)))&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Testing Section Without Any Interesting Title&lt;/h2&gt; &lt;p&gt;Now we can test it. Lets create a line agent playing some nice bass
tone.&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;user&amp;gt; (def a (line-agent (open-line popular-format) 60))&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you don&amp;apos;t have a subwoofer or good headphones you&amp;apos;d like to
increase the frequency to hear anything:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;user&amp;gt; (change-freq a 200)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Also, we can test pausing and replaying the sound.&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;user&amp;gt; (pause a)
user&amp;gt; (play a)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If there&amp;apos;s nothing coming out from speakers or some exception happened
try changing audio format, my guesses would be toggling endianness and
changing both rates to 44100.&lt;/p&gt;  &lt;h2&gt;Appendix A: Melody&lt;/h2&gt; &lt;p&gt;Maybe simple continuous sound is boring? Let&amp;apos;s play a melody! :)&lt;/p&gt;  &lt;p&gt;The simplest notation for music that I came up with is just a pair of
tone and duration. So a melody is just a sequence of those.&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(def mountain-king
  [[0 1] [2 1] [3 1] [5 1]
   [7 1] [3 1] [7 2]
   [6 1] [2 1] [6 2]
   [5 1] [1 1] [5 2]
   [0 1] [2 1] [3 1] [5 1]
   [7 1] [3 1] [7 1] [12 1]
   [10 1] [7 1] [3 1] [7 1]
   [10 2] [-2 2]])&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;First number of every pair is a distance in semitones from some base
tone. The second is a duration of note relative to some base duration.&lt;/p&gt;  &lt;p&gt;Function &lt;code&gt;tone-freq&lt;/code&gt; will translate tones to raw frequencies. For the
value 99 it&amp;apos;s 440 Hz which happens to be &lt;a href=&quot;http://en.wikipedia.org/wiki/A440_%28pitch_standard%29&quot;&gt;so-called &lt;em&gt;pitch
standard&lt;/em&gt;&lt;/a&gt;.
To get a note an octave higher or lower just add/subtract 11.&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(defn tone-freq [x]
  (-&amp;gt; (Math/pow 2 (/ x 11)) (* 440) (/ 512)))&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;I won&amp;apos;t get into details here... It&amp;apos;s just scaling values so it&amp;apos;s
comfortable to use.&lt;/p&gt;  &lt;p&gt;Using &lt;code&gt;Thread/sleep&lt;/code&gt; is maybe the lamest timing
technique you can get on JVM:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(defn play-melody [agent base-tone base-duration melody]
  (doseq [[tone duration] melody]
    (change-freq agent (tone-freq (+ base-tone tone)))
    (Thread/sleep (* base-duration duration)))
  (pause agent))&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now, lets just play it (the awful clipping needs to be addressed in
the nearest possible future):&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;user&amp;gt; (play-melody a 70 400 mountain-king)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If it&amp;apos;s too low, try increasing &lt;code&gt;base-tone&lt;/code&gt;. If it&amp;apos;s to slow, try
decreasing &lt;code&gt;base-duration&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;That&amp;apos;s all. I&amp;apos;ve put the code here:
&lt;a href=&quot;https://gist.github.com/1034374&quot;&gt;https://gist.github.com/1034374&lt;/a&gt;. Tell me what you think.&lt;/p&gt;
    </content>
  </entry>
  
  
</feed>
