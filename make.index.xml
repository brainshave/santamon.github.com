<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Long-standing Bug</title>
  <link href="http://longstandingbug.com/atom.xml" rel="self" />
  <link href="http://longstandingbug.com" />
  <updated>2010-08-16T00:00:00+00:00</updated>
  <id>http://longstandingbug.com/atom.xml</id>
  <author>
    <name>Szymon Witamborski</name>
    <email>santamon@gmail.com</email>
  </author>

  
  <entry>
    <title>Intro</title>
    <link href="http://longstandingbug.com/intro.html" />
    <updated>2010-08-16T00:00:00+00:00</updated>
    <id>http://longstandingbug.com/intro.html</id>
    <content type="html">
      &lt;p class=&quot;sidenote&quot;&gt;
Ten wpis traktuje o pierwszym designie, który ma niewiele wspólnego z obecnym
&lt;/p&gt;

 &lt;p&gt;Witam serdecznie. O blogu, który by się tak nazywał, działał i wyglądał myślałem
od jakiegoś czasu. Będę pisał o własnych zainteresowaniach,
skupiając się zapewne w głównej mierze na języku &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;.
Mam dwa pomysły na pracę mgr, których, dopóki nie dorosną, nie zdradzę.&lt;/p&gt;  &lt;p&gt;Wygląd strony jest minimalistyczny; mam nadzieję, że jeśli nie przypadnie
komuś do gustu to przynajmniej nie będzie przeszkadzał w dostępie do treści.&lt;/p&gt;
      &lt;h2&gt;Makeblog&lt;/h2&gt; &lt;p&gt;Na potrzeby bloga napisałem kilka skryptów do generowania stron off-line.
Kilka zalet takiego rozwiązania (porównując np. z Wordpressem):&lt;/p&gt; &lt;ul&gt;&lt;li&gt;strony ładują się szybciej, nie ma odwołań do bazy danych,&lt;/li&gt;&lt;li&gt;mogę użyć dowolnego edytora do edycji stron/wpisów,&lt;/li&gt;&lt;li&gt;całą treść trzymam u siebie na dysku, zmiana hostingu jest dzięki temu uproszczona. &lt;/li&gt;&lt;/ul&gt; &lt;p&gt;W tym momencie strona hostowana jest na
&lt;a href=&quot;http://github.com/santamon/santamon.github.com&quot;&gt;GitHubie&lt;/a&gt;, co mi
bardzo odpowiada: synchronizacja treści przez gita, cud-miód :).&lt;/p&gt;  &lt;p&gt;Makeblog używa składni podobnej do &lt;a href=&quot;http://orgmode.org&quot;&gt;&lt;code&gt;org-mode&lt;/code&gt;&amp;apos;a&lt;/a&gt;.
Dzięki temu mogę pisać wpisy w czystym tekście, polecam zobaczyć
&lt;a href=&quot;http://github.com/santamon/santamon.github.com/blob/master/input/intro.txt&quot;&gt;plik źródłowy tego wpisu&lt;/a&gt;
oraz plik
&lt;a href=&quot;http://github.com/santamon/makeblog/blob/master/input/Syntax.txt&quot;&gt;Syntax&lt;/a&gt;,
którego używałem do testowania parsera.
&lt;a href=&quot;http://github.com/santamon/santamon.github.com/blob/master/templates/article.html&quot;&gt;Schematy stron&lt;/a&gt;
używają bardzo prostej składni (podmiany z &lt;code&gt;$&lt;/code&gt;).&lt;/p&gt;  &lt;h2&gt;Skąd taka nazwa?&lt;/h2&gt; &lt;p&gt;Proste: Makeblog używa programu &lt;strong&gt;make&lt;/strong&gt; do śledzenia, które pliki mają być
zaktualizowane. Skrypty do parsowania tekstu i indeksowania są napisane
w Pythonie. Dlaczego nie w Clojure? Może więcej o Makeblogu w następnym
wpisie.&lt;/p&gt;  &lt;p&gt;Projekt jest hostowany na GitHubie: &lt;a href=&quot;http://github.com/santamon/makeblog&quot;&gt;http://github.com/santamon/makeblog&lt;/a&gt;.&lt;/p&gt;  &lt;h2&gt;Braki i niedoróbki&lt;/h2&gt; &lt;p class=&quot;sidenote&quot;&gt;
Problemy te nie dotyczą aktualnego wyglądu strony, która używa innych czcionek.
&lt;/p&gt;

 &lt;p&gt;Póki co zauważyłem problemy z renderowaniem czcionek pod Windowsem
(gdy używa się ClearType, pod Safari z renderowaniem &amp;quot;makowym&amp;quot; wygląda
b. dobrze).  Dlatego na Viście i 7 zostaną użyte kroje systemowe (nowe
kroje wprowadzone z Vistą, nie ma ich w innych OS-ach, więc na
Linuksie zostaną użyte te zagnieżdżone). Na XP jeszcze nie wiem co
zrobić. Zobaczymy po testach (nie mam komputera z XP pod ręką
ostatnio).&lt;/p&gt;  &lt;p&gt;Brakuje kilku istotnych łebdwazerowych funkcji, czyli tagów i RSS-a lub Atoma.
Jest w moim TODO ;).&lt;/p&gt;
    </content>
  </entry>
  
  <entry>
    <title>One Makefile To Rule Them All</title>
    <link href="http://longstandingbug.com/one-makefile-to-rule-them-all.html" />
    <updated>2009-06-07T00:00:00+00:00</updated>
    <id>http://longstandingbug.com/one-makefile-to-rule-them-all.html</id>
    <content type="html">
      &lt;blockquote&gt;&lt;p&gt; One Makefile to rule them all, One Makefile to find them,&lt;br /&gt;
 One Makefile to bring them all and in the batch compile them&lt;br /&gt;
 In the Land of Unix where the Shells lie.&lt;/p&gt;&lt;/blockquote&gt;
      &lt;p class=&quot;sidenote&quot;&gt;Wpis archiwalny z &lt;a href=&quot;http://gaco.wordpress.com&quot;&gt;mojej starej strony&lt;/a&gt;.&lt;/p&gt;

 &lt;p&gt;Kiedyś szukałem sposobu, by dodając nowe pliki *.cpp do projektu
(każdy z nich był osobnym programem) nie trzeba było modyfikować
Makefile&amp;apos;a i dałem sobie spokój w pewnym momencie.  Szukałem niezbyt
gorliwie jak się okazuje, bo podpowiedź była
&lt;a href=&quot;http://www.gnu.org/software/make/manual/html_node/Wildcard-Function.html&quot;&gt;w manualu do GNU Make&amp;apos;a&lt;/a&gt;.
Ten Makefile skompiluje wszystkie pliki *.cpp jako osobne programy do
podkatalogu bin.&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;cele := $(patsubst %.cpp,bin/%,$(wildcard *.cpp))

komp=g++ -Wall -O2

asdf: $(cele)

$(cele) : bin/% : %.cpp
  $(komp) $&amp;lt; -o $@

clean:
  rm $(cele)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Żeby pakowało binarki bezpośrednio do katalogu ze źródłami trzeba usunąć 2x &lt;code&gt;bin/&lt;/code&gt;.&lt;/p&gt;
    </content>
  </entry>
  
  
</feed>
