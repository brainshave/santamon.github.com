Stateful GUI FTW!

date: 2011-05-06

=> First post in English. Prepare for more.

When creating interface, GUI FTW! doesn't return only element any
more. Now you'll get a bunch of stuff that together compose *gui
state*. It's a map wrapped in an atom with these preset of keys:


- @:ids@ -- objects identified by their @\*id@
- @:groups@ -- objects grouped by their @\*groups@
- @:root@ -- root (top) element of gui structure -- @JFrame@ instance in this case.

Example:

@@
user> ((swing [JFrame [*id :window
                       *groups [:containers]]
               [JPanel [*groups [:containers :asdfs]]
                [JButton [*id :button
                          *groups [:asdfs]]]]]))

#Atom@533e846f:
  {:ids {:button #<JButton>
         :window #<JFrame>}
   :groups {:containers (#<JFrame> #<JPanel>)
            :asdfs (#<JPanel> #<JButton>)}
   :root #<JFrame ...>}
@@

Also, you can put any custom keys into gui state to keep things in one
place.

* Events

Event handler functions now get one extra argument (on front, so
event is second argument now), which is gui state.

I call it "state map" because it holds information about runtime
state. State map have three standard keys:
