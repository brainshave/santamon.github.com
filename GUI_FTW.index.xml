<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Long-standing Bug</title>
  <link href="http://longstandingbug.com/atom.xml" rel="self" />
  <link href="http://longstandingbug.com" />
  <updated>2011-05-16T00:00:00+00:00</updated>
  <id>http://longstandingbug.com/atom.xml</id>
  <author>
    <name>Szymon Witamborski</name>
    <email>santamon@gmail.com</email>
  </author>

  
  <entry>
    <title>Reintroducing GUI FTW and Progress Report</title>
    <link href="http://longstandingbug.com/reintroducing-guiftw.html" />
    <updated>2011-05-16T00:00:00+00:00</updated>
    <id>http://longstandingbug.com/reintroducing-guiftw.html</id>
    <content type="html">
      &lt;p&gt;I meant this post to be a simple translation of
&lt;a href=&quot;niech-sie-stanie-gui-ftw.html&quot;&gt;this&lt;/a&gt; but some things changed that are
worth mentioning.&lt;/p&gt;
      &lt;p&gt;&lt;strong&gt;GUI FTW!&lt;/strong&gt; is a &lt;em&gt;declarative&lt;/em&gt; GUI library. I&amp;apos;ve borrowed concepts
from the Web (the good parts). It&amp;apos;s kind of little internal DSL for
GUI&amp;apos;s. You&amp;apos;ll stop manually creating boring repetitive code like:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(doto (JFrame.)
  (.setA &amp;quot;A&amp;quot;)
  (.setB &amp;quot;B&amp;quot;)
  (.addXxxListener (reify ...))
  ...)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead all the boilerplate will be generated by GUI FTW! and you&amp;apos;ll
never need to look at code like that again.&lt;/p&gt;  &lt;p&gt;The before-mentioned &lt;strong&gt;good parts&lt;/strong&gt; of the Web include:&lt;/p&gt;  &lt;ol&gt;
&lt;li&gt;a &lt;b&gt;GUI structure tree&lt;/b&gt; (say, like HTML but in Clojure),
&lt;pre&gt;&lt;code&gt;[JFrame [*id :main-window]
  [JButton [*id :super-button]]]&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Cascade Style Sheets&lt;/b&gt; (say, like CSS but in Clojure),
&lt;pre&gt;&lt;code&gt;[:main-window] [:title &amp;quot;Window FTW!&amp;quot;, :visible true]
[:super-button] [:text &amp;quot;Make something happen!&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;hooking functions into events&lt;/b&gt; (say, like JavaScript but in Clojure).
&lt;pre&gt;&lt;code&gt;[:super-button] [:action++performed (fn [state event] ...)]&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;

 &lt;p&gt;The bad parts would be using XML and JavaScript literally ;) .
Actually, the CSS part look and works like original CSS. It just
doesn&amp;apos;t have those fancy selectors yet.&lt;/p&gt;  &lt;h2&gt;SWT FTW! (and swing too...)&lt;/h2&gt; &lt;p class=&quot;sidenote&quot;&gt;[1] Well, for toolkits that follow the same pattern
that SWT and Swing do.&lt;/p&gt;
&lt;p class=&quot;sidenote&quot;&gt;[2] Notice that
&lt;a href=&quot;https://github.com/santamon/GUIFTW/blob/9febcf9559cade88394e9fc66a91d0a9bffdb499/src/guiftw/swt.clj#L13&quot;&gt;swt&lt;/a&gt;
is just a wrapper around &lt;code&gt;parse-gui&lt;/code&gt; and &lt;code&gt;swt-create&lt;/code&gt;).&lt;/p&gt;

 &lt;p&gt;GUI FTW works with SWT! It&amp;apos;s because it&amp;apos;s an &lt;strong&gt;abstract&lt;/strong&gt;
library. Neither Swing nor SWT stuff are hard-coded. And GUI FTW needs
only one function to be implemented to support another toolkit. [1] And those functions are
simple as
&lt;a href=&quot;https://github.com/santamon/GUIFTW/blob/9febcf9559cade88394e9fc66a91d0a9bffdb499/src/guiftw/swt.clj#L8&quot;&gt;swt-create&lt;/a&gt;. [2]&lt;/p&gt;  &lt;h2&gt;Reusability&lt;/h2&gt; &lt;p&gt;What&amp;apos;s created with GUI FTW! is always reusable: you&amp;apos;ll get a function
to instantiate your GUI as many times as you want to. Also, style
sheets are list of function-like objects that applies some properties
to objects. You can mix different GUI&amp;apos;s with different style sheets at
runtime freely. This paragraph is here in case of thought that
everything is written using macros flew across someone&amp;apos;s mind ;)
. Actually, I&amp;apos;ve tried to minimize use of macros.&lt;/p&gt;  &lt;h2&gt;More?&lt;/h2&gt; &lt;p&gt;I&amp;apos;ve setup a wiki on GitHub and even wrote a tutorial for GUI
FTW!. Here&amp;apos;s a couple of links you&amp;apos;d likely be interested in:&lt;/p&gt;  &lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/santamon/GUIFTW&quot;&gt;Project Page&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/santamon/GUIFTW/wiki&quot;&gt;Wiki&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/santamon/GUIFTW/wiki/Overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/santamon/GUIFTW/wiki/One-Tutorial-For-All&quot;&gt;One &lt;strong&gt;Tutorial&lt;/strong&gt; For All&lt;/a&gt; (including Swing &lt;em&gt;and&lt;/em&gt; SWT)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://longstandingbug.com/GUIFTW&quot;&gt;Online Docs&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt; &lt;h2&gt;What&amp;apos;s New?&lt;/h2&gt; &lt;p&gt;Since the
&lt;a href=&quot;niech-sie-stanie-gui-ftw.html&quot;&gt;original announcement in Polish&lt;/a&gt; I&amp;apos;ve
added couple of things, most important runtime state handling, support
for custom &amp;quot;special properties&amp;quot; and for custom
&amp;quot;&lt;a href=&quot;https://github.com/santamon/GUIFTW/issues/1&quot;&gt;adders&lt;/a&gt;&amp;quot; (Swing only).&lt;/p&gt;  &lt;h3&gt;State in Sane Manner&lt;/h3&gt; &lt;p&gt;After creating a widget you&amp;apos;ll get a map wrapped with atom which I call
&amp;quot;GUI state&amp;quot;. It contains data about identifiers, groups, and root of
the widget tree. Any other additional data can be added by user. Every
event handler fn will get that state as first argument. You can query
state like this:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(-&amp;gt; @state :ids :asdf)    ;; get object with id :asdf
(-&amp;gt; @state :groups :qwer) ;; get list of objects in group :qwer
(-&amp;gt; @state :root)         ;; get root, usually the window&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When creating widgets you either pass state explicitly or a new one
is created for you. You can also decide which parts of window share
state and which doesn&amp;apos;t.&lt;/p&gt;  &lt;p&gt;For more info check out last part of
&lt;a href=&quot;https://github.com/santamon/GUIFTW/wiki/Overview&quot;&gt;Overview&lt;/a&gt; on wiki.&lt;/p&gt;  &lt;h3&gt;Custom &amp;quot;Adders&amp;quot;&lt;/h3&gt; &lt;p&gt;I knew that the day will come that I get hit by some Swing or SWT
-specific quirk. So I got an
&lt;a href=&quot;https://github.com/santamon/GUIFTW/issues/1&quot;&gt;issue&lt;/a&gt; :) (Thanks to the
Reporter, by the way).&lt;/p&gt;  &lt;p&gt;Everything is sweet and honey in Swing when you can use method &lt;code&gt;add&lt;/code&gt;
to add object to its parent. But there are some cases when Swing
designers broke that pattern, most notably the
&lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/javax/swing/JTabbedPane.html&quot;&gt;JTabbedPane&lt;/a&gt;
when you have to use &lt;code&gt;addTab&lt;/code&gt; method. So now (only in Swing, SWT has
different &amp;quot;parenting&amp;quot; scheme) you can set &lt;code&gt;:*adder&lt;/code&gt; property to change
default behavior. Adder is just a function that takes 4 arguments
&lt;code&gt;[parent parent-style child child-style]&lt;/code&gt; and does whatever is
needed. For &lt;code&gt;JTabbedPane&lt;/code&gt; it would be:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(fn [parent parent-style child child-style]
  (.addTab parent (-&amp;gt; child-style :specials :*tab-title) child))&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There&amp;apos;s also a case of
&lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/javax/swing/JScrollPane.html&quot;&gt;JScrollPane&lt;/a&gt;
where the &lt;code&gt;setViewportView&lt;/code&gt; method should be used. When you want to
have scroll controls on &lt;code&gt;JTextArea&lt;/code&gt;, you have to wrap a &lt;code&gt;JScrollPane&lt;/code&gt;
around it. So it sounds like putting text area into scroll pane. So
for this scenario we&amp;apos;d write:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;[JScrollPane [:*adder (fn [parent _ child _]
                        (.setViewportView parent child))]
 [JTextArea]]&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;instead of &lt;code&gt;[JScrollPane [:viewport-view (JTextArea.)]]&lt;/code&gt; which breaks
flow of the tree (and you can&amp;apos;t use other goodness of GUI FTW! for the
text area object like styles or grouping).&lt;/p&gt;  &lt;p&gt;There&amp;apos;s a &lt;a href=&quot;https://github.com/santamon/GUIFTW/blob/master/src/guiftw/examples/swing/custom_adders.clj&quot;&gt;fancy example&lt;/a&gt; using those two.&lt;/p&gt;  &lt;h2&gt;Why Bother the Programmer?&lt;/h2&gt; &lt;p class=&quot;sidenote&quot;&gt;
[3] Good luck with that, I live on 10th floor :P.
&lt;/p&gt;

 &lt;p&gt;If you look at my
&lt;a href=&quot;https://github.com/santamon/GUIFTW/blob/9febcf9559cade88394e9fc66a91d0a9bffdb499/TODO.md&quot;&gt;TODO&lt;/a&gt;
list you will see that I plan to put those quirks in special style
sheet in &lt;code&gt;guiftw.swing&lt;/code&gt;. I also consider using this style sheet by
default in Swing. If you know any &lt;strong&gt;other cases&lt;/strong&gt; that should be
included, &lt;em&gt;please&lt;/em&gt; let me know, either by
&lt;a href=&quot;https://github.com/santamon/GUIFTW/issues&quot;&gt;creating an issue&lt;/a&gt;,
&lt;a href=&quot;http://longstandingbug.com/info.html&quot;&gt;mailing me&lt;/a&gt; or throwing a brick
at my window. [3]&lt;/p&gt;
    </content>
  </entry>
  
  <entry>
    <title>Zdarzenia w GUI FTW</title>
    <link href="http://longstandingbug.com/zdarzenia-guiftw.html" />
    <updated>2011-04-04T00:00:00+00:00</updated>
    <id>http://longstandingbug.com/zdarzenia-guiftw.html</id>
    <content type="html">
      &lt;p&gt;Tradycyjnie w Swingu bądź SWT żeby obsłużyć zdarzenie musimy utworzyć
nową implementację jakiegoś interfejsu, np. &lt;code&gt;MouseListener&lt;/code&gt; a potem
go zarejestrować w obiekcie, którego zdarzenia nas interesują:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;button.addMouseListener(new MouseListener() {
    public void mouseClicked(MouseEvent event) {
        //... obsługa zdarzenia
    }
    public void mouseEntered(MouseEvent event) {
        //... obsługa zdarzenia
    }
    public void mouseExited(MouseEvent event) {
        //... obsługa zdarzenia
    }
    public void mousePressed(MouseEvent event) {
        //... obsługa zdarzenia
    }
    public void mouseReleased(MouseEvent event) {
        //... obsługa zdarzenia
    }
});&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Jeśli obchodzi nas tylko jedno zdarzenie, wygodnie jest dziedziczyć po
klasie &lt;code&gt;MouseAdapter&lt;/code&gt;, która implementuje wszystkie metody jako puste,
wystarczy więc zaimplementować jedną metodę:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;button.addMouseListener(new MouseAdapter() {
    public void mouseClicked(MouseEvent event) {
        //... obsługa zdarzenia
    }
});&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Jak widać, trzeba się sporo opisać zanim dotrze się do miejsca, gdzie
umieści się właściwy kod, nawet w wersji z adapterem. Jeśli jest
możliwe napisanie kodu krótszego i przynajmniej tak samo dobrze
wyrażającego co chcemy osiągnąć to moim zdaniem warto.&lt;/p&gt;  &lt;h2&gt;Jak to wygląda w GUI FTW!?&lt;/h2&gt; &lt;p&gt;Obsługę zdarzeń wrzucamy do arkuszy stylów. Wygląda to tak jak każda
inna właściwość (tekst, kolor, itd.) poza tym, że nazwą właściwości
jest specyfikacja zdarzenia a wartością jest funkcja która je obsłuży.
Dzięki temu zyskujemy również na wszystkich zaletach arkuszy stylów,
np. można obsłużyć zdarzenia z wielu obiektów na raz.&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(stylesheet [[:cos :drugie-cos] [:text &amp;quot;Coś!&amp;quot;
                                 &amp;lt;spec-zdarzenia&amp;gt; &amp;lt;funkcja&amp;gt;]])&lt;/code&gt;&lt;/pre&gt; &lt;h3&gt;Specyfikacja zdarzenia&lt;/h3&gt; &lt;p&gt;GUI FTW! musi znać dwie rzeczy: nazwę interfejsu &lt;code&gt;*Listener&lt;/code&gt; i jedną
metodę do zaimplementowania -- nazwę zdarzenia. Trzeba to podać w
takiej formie:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;&amp;lt;nazwa interfejsu&amp;gt;+&amp;lt;nazwa metody&amp;gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Czyli np. &lt;code&gt;mouse+mouse-clicked&lt;/code&gt; albo
&lt;code&gt;action+action-performed&lt;/code&gt;. Odpada dzięki temu spora część zbędnego
kodu z pierwszego przykładu. Widać coś jeszcze: np. w
&lt;code&gt;mouse+mouse-clicked&lt;/code&gt; słowo &lt;code&gt;mouse&lt;/code&gt; powtarza się. Ponieważ występuje
to dość często dodałem skrót: jeśli napiszemy &lt;code&gt;++&lt;/code&gt; zamiast &lt;code&gt;+&lt;/code&gt; możemy
pozbyć się zbędnego słowa.&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;mouse++clicked -&amp;gt; mouse+mouse-clicked -&amp;gt; MouseListener.mouseClicked&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;Dlaczego nie uniwersalne &lt;code&gt;on-click&lt;/code&gt; albo &lt;code&gt;on-mouse-over&lt;/code&gt;?&lt;/h4&gt; &lt;p&gt;Takie rozwiązanie na pewno byłoby intuicyjne dla osób
początkujących. Nie widzę jednak sensu gdy &lt;code&gt;mouse++clicked&lt;/code&gt; jest
wystarczająco wymowne. Poza tym powodowałoby zwiększenie kodu w GUI
FTW! specyficznego dla bibliotek, które obsługuje (w tym momencie
Swing i SWT).&lt;/p&gt;  &lt;p&gt;Dzięki temu, że GUI FTW! wymaga podania nazwy interfejsu i metody,
możliwa jest obsługa zdarzeń wymyślonych przez programistę na poziomie
równym z tymi wbudowanymi w Swing bądź SWT.&lt;/p&gt;  &lt;h3&gt;Funkcja obsługująca&lt;/h3&gt; &lt;p&gt;W tym momencie funkcja obsługująca zdarzenie ma jeden argument:
zdarzenie, które wystąpiło. Może to być zarówno funkcja anonimowa jak
i nazwa funkcji zdefiniowanej w innym miejscu.&lt;/p&gt;  &lt;h2&gt;Przykład&lt;/h2&gt; &lt;p&gt;Rozwinę lekko przykład z poprzedniego wpisu (utrzymując poziom
hellołłorldowy). Dla przypomnienia struktura interfejsu:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(def window
  (swing
    [JFrame [*id :okno-ftw]
     [JButton [*id :przycisk-omg]]]))&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Do arkusza styli dodamy obsługę zdarzenia:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(def sheet
 (stylesheet
  [:okno-ftw] [:title &amp;quot;GUI FTW!&amp;quot;
               :size ^unroll (300 200)
               :visible true]
  [:przycisk-omg] [:text &amp;quot;To jest przycisk!&amp;quot;
                   :mouse++clicked
                   (fn [event]
                    (JOptionPane/showMessageDialog nil &amp;quot;GUI FTW!&amp;quot;))]))&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&quot;images/gui-ftw-pierwsza-akcja.png&quot; alt=&quot;Prosty przykład podpięcia akcji pod przycisk&quot;&gt;&lt;/p&gt;  &lt;p&gt;Pełny kod tego przykładu znajduje się &lt;a href=&quot;https://github.com/santamon/GUIFTW/blob/master/src/guiftw/examples/swing/basic.clj&quot;&gt;tutaj&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  
  <entry>
    <title>Niech się stanie GUI FTW!</title>
    <link href="http://longstandingbug.com/niech-sie-stanie-gui-ftw.html" />
    <updated>2011-03-20T00:00:00+00:00</updated>
    <id>http://longstandingbug.com/niech-sie-stanie-gui-ftw.html</id>
    <content type="html">
      &lt;p&gt;Ponieważ uwielbiam programowanie deklaratywne brakowało mi od dawna
czegoś deklaratywnego do tworzenia GUI. Kod tworzący GUI jest zawsze
bardzo nudny i powtarzalny: &amp;quot;stwórz obiekt, ustaw jego tekst, ikonę,
dodaj akcję na klik (wcześniej stwórz obiekt implementujący
odpowiedniego listenera), ew. stwórz obiekty-dzieci, bla bla bla&amp;quot;.&lt;/p&gt;
      &lt;p&gt;Projektanci stron internetowych od początku mają do dyspozycji HTML i
CSS, które są jak najbardziej deklaratywne w swojej naturze. Dodatkowo
treść określa się osobno od tego jak ma wyglądać. Model ten zaczyna
wychodzić poza przeglądarki, np. XAML w .NET albo pliki layoutów w
Androidzie. Wszystkie znane mi do tej pory tego przykłady opierają się
na XML-u i dodatkowym programie generującym kod w trakcie kompilacji.&lt;/p&gt;  &lt;p&gt;Ostatnio pracuję nad podobną biblioteką dla Clojure. Są jednak dwie
główne różnice:&lt;/p&gt;  &lt;ol&gt;&lt;li&gt;Tak jak dla programistów Javy naturalnym językiem do opisu danych
jest XML tak dla programistów Clojure tym językiem jest Clojure.&lt;/li&gt;&lt;li&gt;Moja biblioteka jest jedynie biblioteką, nie wymaga dodatkowych
programów generujących (powiedzmy) kod Javy z XML-a. &lt;/li&gt;&lt;/ol&gt; &lt;p&gt;Ad 1. Składnia Clojure to tylko struktury danych: listy, wektory i
mapy o &lt;em&gt;wybornej&lt;/em&gt; składni. Grzechem byłoby używać w takiej sytuacji
XML-a. Całe parsowanie robi za mnie Clojure więc mogę martwić się już
tylko znaczeniem tego co siedzi w środku. Zarówno drzewo GUI (analogia
do HTML) jak i style (CSS) definiowane są za pomocą kodu w Clojure.&lt;/p&gt;  &lt;p&gt;Ad 2. Dzięki magicznym technikom metaprogramowania (makrom) mogę
wchodzić w drogę kompilatorowi Clojure i generować kod tuż przed
kompilacją zamiast generować kod programem i dopiero potem wywoływać
kompilator. Dlatego całą funkcjonalność można spakować do pliku jar i
używać jak każdej innej biblioteki. Ułatwia to także programowanie
interaktywne z użyciem REPL.&lt;/p&gt;  &lt;h2&gt;Co, gdzie, jak?&lt;/h2&gt; &lt;p&gt;Teraz nieco więcej o samej bibliotece. Nazwałem ją &lt;strong&gt;GUI FTW!&lt;/strong&gt; a pobrać
ją można stąd: &lt;a href=&quot;http://github.com/santamon/GUIFTW&quot;&gt;http://github.com/santamon/GUIFTW&lt;/a&gt;. Jest dostępna
także na &lt;a href=&quot;http://clojars.org/guiftw&quot;&gt;Clojars&lt;/a&gt; więc wystarczy dodać
&lt;code&gt;[guiftw &amp;quot;0.1.0-SNAPSHOT&amp;quot;]&lt;/code&gt; do zależności projektu aby jej
użyć. Polecam poeksperymentować z przykładami w katalogu
&lt;a href=&quot;http://github.com/santamon/GUIFTW/blob/master/src/guiftw/examples&quot;&gt;src/guiftw/examples&lt;/a&gt;,
które są również mocno obkomentowane w formie tutoriala.&lt;/p&gt;  &lt;p&gt;GUI FTW! nie jest kolejnym toolkitem obok SWT i Swinga -- jest
deklaratywną nakładką na nie. Tzn. GUI FTW! można używać do tworzenia
interfejsów używając jednego albo drugiego pod spodem. Do tego zostało
napisane na tyle abstrakcyjnie, że można łatwo dopisać obsługę
kolejnego toolkitu. Ułatwi to przesiadkę programistom Javy, którzy
znają jedno albo drugie. Poza tym, pisanie kolejnego toolkitu nie jest
po prostu celem tego projektu.&lt;/p&gt;  &lt;h2&gt;Banalny przykład&lt;/h2&gt; &lt;p&gt;Strukturą GUI jest drzewo, którego węzeł składa się z nazwy
klasy, listy właściwości oraz z jego węzłów-dzieci.&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(def window
 (swing
   [JFrame [:title &amp;quot;GUI FTW!&amp;quot;
            :visible true]
    [JButton [:text &amp;quot;To jest przycisk!&amp;quot;]]]))&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Wewnątrz listy cech można używać dowolnych nazw, które mają swoje
settery w danej klasie. Np. &lt;code&gt;:title&lt;/code&gt; tłumaczone jest na wywołanie
metody &lt;code&gt;setTitle&lt;/code&gt;, &lt;code&gt;:default-close-operation&lt;/code&gt; na
&lt;code&gt;setDefaultCloseOperation&lt;/code&gt; itd.&lt;/p&gt;  &lt;p&gt;Aby zdefiniować style osobno musimy nadać elementom identyfikatory:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;[JFrame [*id :okno-ftw]
 [JButton [*id :przycisk-omg]]]&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;a osobno w tzw. arkuszu stylów zdefiniować cechy obiektów:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(def sheet
 (stylesheet
  [:okno-ftw] [:title &amp;quot;GUI FTW!&amp;quot;
               :size ^unroll (300 200)
               :visible true]
  [:przycisk-omg] [:text &amp;quot;To jest przycisk!&amp;quot;]))&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Składnia styli składa się z par list: najpierw lista identyfikatorów,
druga lista jest listą właściwości jak poprzednio. &lt;code&gt;^unroll&lt;/code&gt; jest
potrzebne dla setterów, które mają więcej niż jeden parametr. Lista
poprzedzona &lt;code&gt;^unroll&lt;/code&gt; zostanie rozwinięta na wszystkie jego parametry
zamiast wywołać setter z listą jako parametrem. Czyli otrzymamy
odpowiednik &lt;code&gt;setSize(300, 200)&lt;/code&gt; zamiast &lt;code&gt;setSize((300, 200))&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Makro &lt;code&gt;swing&lt;/code&gt; zwraca funkcję, która utworzy chciane GUI, więc &lt;code&gt;window&lt;/code&gt;
będzie funkcją. Parametrami tej funkcji jest ew. obiekt nadrzędny
(jeśli nie tworzylibyśmy okna tylko jakiś podrzędny element, może być
nil) oraz dowolna ilość arkuszy styli. Utworzenie okna będzie więc
wyglądało tak:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;(window nil sheet)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&quot;images/gui-ftw-pierwsze-okno.png&quot; alt=&quot;Pierwsze okno&quot;&gt;&lt;/p&gt;  &lt;p&gt;Arkuszy może być więcej, możemy także podać inny komplet. Możemy też
utworzyć wiele okien wywołując powtórnie tę funkcję. Zwrócony zostanie
element na korzeniu drzewa.&lt;/p&gt;  &lt;p&gt;Analogiczny przykład w SWT użyłby klas specyficznych dla SWT i przede
wszystkim makra &lt;code&gt;swt&lt;/code&gt; zamiast &lt;code&gt;swing&lt;/code&gt;.&lt;/p&gt;  &lt;h2&gt;Co dalej&lt;/h2&gt; &lt;p&gt;Zacząłem pisać dokumentację. Jest dostępna w kodzie bądź przez &lt;code&gt;doc&lt;/code&gt; w
REPL-u. Przydałaby się też dokumentacja on-line w stylu &lt;a href=&quot;http://clojure.github.com/clojure/&quot;&gt;tej dla samego Clojure&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;W tym momencie można stworzyć GUI, ostylować go i podpiąć zdarzenia (o
czym będzie następny wpis). Brakuje całej części &amp;quot;stanowej&amp;quot;, w
szczególności wyciąganie z drzewa interesujących nas elementów. Mam
również pomysł, by podpinać wartości (np. tekst pola tekstowego)
dwustronnie pod clojure&amp;apos;owe atomy, refy, agentów itp. Pozwoliłoby to
na spięcie GUI i np. pamięci transakcyjnej.&lt;/p&gt;
    </content>
  </entry>
  
  
</feed>
